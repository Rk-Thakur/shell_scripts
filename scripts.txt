echo $SHELL : The echo $SHELL command is used in Unix-like operating systems (such as Linux or macOS) to display the path of the current user's shell. The shell is a command-line interpreter that allows users to interact with the operating system by entering commands. When you execute echo $SHELL, it prints the path to the shell executable that is currently being used.


chmod +x name.sh: The chmod +x name.sh command is used to make a shell script executable in a Unix-like operating system. Here's a breakdown of the command:
chmod: Stands for "change mode." It is a command in Unix and Unix-like operating systems that is used to change the access permissions of files and directories.

+x: This option is used with chmod to add execute permission to the specified file. In this case, it is adding execute permission to the file name.sh.

name.sh: This is the name of the file for which you are changing the permissions. In this context, it seems to be a shell script file named name.sh.

So, the overall meaning of the command is: "Change the permissions of the file name.sh to make it executable."


cat /etc/shells : will list the shell install in computer

chsh: to change the shell


The "$*" special parameter takes the entire list as one argument with spaces between and the "$@" special parameter takes the entire list and separates it into separate arguments.


$0 : The filename of the current script.


$n : These variables correspond to the arguments with which a script was invoked. Here n is a positive decimal number corresponding to the position of an argument (the first argument is $1, the second argument is $2, and so on).


$# : The number of arguments supplied to a script.

	
$* : All the arguments are double quoted. If a script receives two arguments, $* is equivalent to $1 $2.

	
$@ : All the arguments are individually double quoted. If a script receives two arguments, $@ is equivalent to $1 $2.

	
$? : The exit status of the last command executed.

	
$$ : The process number of the current shell. For shell scripts, this is the process ID under which they are executing.


$! : The process number of the last background command.


Bourne shell didn't originally have any mechanism to perform simple arithmetic operations but it uses external programs, either awk or expr.


//Relational Operators
-eq	Checks if the value of two operands are equal or not; if yes, then the condition becomes true.	[ $a -eq $b ] is not true.
-ne	Checks if the value of two operands are equal or not; if values are not equal, then the condition becomes true.	[ $a -ne $b ] is true.
-gt	Checks if the value of left operand is greater than the value of right operand; if yes, then the condition becomes true.	[ $a -gt $b ] is not true.
-lt	Checks if the value of left operand is less than the value of right operand; if yes, then the condition becomes true.	[ $a -lt $b ] is true.
-ge	Checks if the value of left operand is greater than or equal to the value of right operand; if yes, then the condition becomes true.	[ $a -ge $b ] is not true.
-le	Checks if the value of left operand is less than or equal to the value of right operand; if yes, then the condition becomes true.	[ $a -le $b ] is true.

//Boolean Operators
!	This is logical negation. This inverts a true condition into false and vice versa.	[ ! false ] is true.
-o	This is logical OR. If one of the operands is true, then the condition becomes true.	[ $a -lt 20 -o $b -gt 100 ] is true.
-a	This is logical AND. If both the operands are true, then the condition becomes true otherwise false.	[ $a -lt 20 -a $b -gt 100 ] is false.

//String Operators
=	Checks if the value of two operands are equal or not; if yes, then the condition becomes true.	[ $a = $b ] is not true.
!=	Checks if the value of two operands are equal or not; if values are not equal then the condition becomes true.	[ $a != $b ] is true.
-z	Checks if the given string operand size is zero; if it is zero length, then it returns true.	[ -z $a ] is not true.
-n	Checks if the given string operand size is non-zero; if it is nonzero length, then it returns true.	[ -n $a ] is not false.
str	Checks if str is not the empty string; if it is empty, then it returns false.	[ $a ] is not false.


//File Operators
-b file	Checks if file is a block special file; if yes, then the condition becomes true.	[ -b $file ] is false.
-c file	Checks if file is a character special file; if yes, then the condition becomes true.	[ -c $file ] is false.
-d file	Checks if file is a directory; if yes, then the condition becomes true.	[ -d $file ] is not true.
-f file	Checks if file is an ordinary file as opposed to a directory or special file; if yes, then the condition becomes true.	[ -f $file ] is true.
-g file	Checks if file has its set group ID (SGID) bit set; if yes, then the condition becomes true.	[ -g $file ] is false.
-k file	Checks if file has its sticky bit set; if yes, then the condition becomes true.	[ -k $file ] is false.
-p file	Checks if file is a named pipe; if yes, then the condition becomes true.	[ -p $file ] is false.
-t file	Checks if file descriptor is open and associated with a terminal; if yes, then the condition becomes true.	[ -t $file ] is false.
-u file	Checks if file has its Set User ID (SUID) bit set; if yes, then the condition becomes true.	[ -u $file ] is false.
-r file	Checks if file is readable; if yes, then the condition becomes true.	[ -r $file ] is true.
-w file	Checks if file is writable; if yes, then the condition becomes true.	[ -w $file ] is true.
-x file	Checks if file is executable; if yes, then the condition becomes true.	[ -x $file ] is true.
-s file	Checks if file has size greater than 0; if yes, then condition becomes true.	[ -s $file ] is true.
-e file	Checks if file exists; is true even if file is a directory but exists.	[ -e $file ] is true.